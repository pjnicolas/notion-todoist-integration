require('dotenv').config();
const { Client } = require('@notionhq/client');
const { TodoistApi } = require('@doist/todoist-api-typescript');
const sqlite3 = require('sqlite3');

const NOTION_SECRET = process.env.NOTION_SECRET;
const NOTION_DATABASE_ID = process.env.NOTION_DATABASE_ID;
const TODOIST_API_TOKEN = process.env.TODOIST_API_TOKEN;
const TODOIST_PROJECT_ID = process.env.TODOIST_PROJECT_ID;
const NOTION_TABLE_COLUMN_NAME = process.env.NOTION_TABLE_COLUMN_NAME;
const NOTION_TABLE_COLUMN_TAGS = process.env.NOTION_TABLE_COLUMN_TAGS;
const NOTION_TABLE_COLUMN_DONE = process.env.NOTION_TABLE_COLUMN_DONE;

const todoist = new TodoistApi(TODOIST_API_TOKEN);
const notion = new Client({ auth: NOTION_SECRET });
const db = new sqlite3.Database('database.sqlite');

// Create table "tasks" with columns "id" (autogenerated), "text" (string) and "done" (boolean)
db.run('CREATE TABLE IF NOT EXISTS tasks (id INTEGER PRIMARY KEY AUTOINCREMENT, text TEXT, done BOOLEAN)');

const notionToTodoistTaskName = (notionTitle, notionTags) => {
  return `**[${notionTags.toUpperCase()}]**: ${notionTitle}`;
}

const dbGetTask = async (title) => {
  return new Promise((resolve, reject) => {
    db.get('SELECT * FROM tasks WHERE text = ?', [title], (err, row) => {
      if (err) {
        reject(err);
      } else {
        resolve(row || undefined);
      }
    });
  });
}

const dbCreateTask = async (title) => {
  return new Promise((resolve, reject) => {
    db.run('INSERT INTO tasks (text, done) VALUES (?, ?)', [title, false], function (err) {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

const dbRemoveTask = async (title) => {
  return new Promise((resolve, reject) => {
    db.run('DELETE FROM tasks WHERE text = ?', [title], function (err) {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

const todoistGetTask = async (title) => {
  const tasks = await todoist.getTasks({ projectId: TODOIST_PROJECT_ID })
  return tasks.find((task) => task.content === title);
}

const todoistCreteTask = async (title) => {
  try {
    await todoist.addTask({
      content: title,
      project_id: TODOIST_PROJECT_ID,
    });
  } catch (error) {
    console.error(`ERROR: Todoist create task: [${title}]`);
    console.log(error);
  }
}

const removeTodoistTask = async (title) => {
  try {
    const task = await todoistGetTask(title);
    if (task) {
      await todoist.closeTask(task.id);
    }
  } catch (error) {
    console.error(`ERROR: Todoist remove task: [${title}]`);
    console.error(error);
  }
}

async function watchNotionDatabase() {
  const changes = await notion.databases.query({
    database_id: NOTION_DATABASE_ID,
  });

  for (const change of changes.results) {
    if (change.object === 'page') {
      const notionDone = change.properties[NOTION_TABLE_COLUMN_DONE].checkbox;
      const notionTitle = change.properties[NOTION_TABLE_COLUMN_NAME].title[0].text.content;
      const notionTags = change.properties[NOTION_TABLE_COLUMN_TAGS].multi_select.map((tag) => tag.name).join(', ');

      const title = notionToTodoistTaskName(notionTitle, notionTags);
      const todoistTask = await todoistGetTask(title);
      const dbTask = await dbGetTask(title);

      if (notionDone && todoistTask) {
        await removeTodoistTask(title, notionTags);
        console.log(`Todoist task deleted: [${title}]`);
      } else if (!notionDone && !todoistTask && dbTask) {
        await notion.pages.update({
          page_id: change.id,
          properties: {
            [NOTION_TABLE_COLUMN_DONE]: {
              checkbox: true,
            },
          },
        });
        dbRemoveTask(title);
        console.log(`Notion task deleted: [${title}]`);
      } else if (!notionDone && !todoistTask && !dbTask) {
        await dbCreateTask(title);
        await todoistCreteTask(title, '', notionTags);
        console.log(`Todoist task created: [${title}]`);
      } else if (!notionDone) {
        // console.log(`Ignoring task (?): [${title}]`);
      }
    }
  }

  // Wait and call again every 10 minutes
  setTimeout(watchNotionDatabase, 1000 * 60 * 10);
}

watchNotionDatabase();
